# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iP_ueMKLvUBsivVvcgry76IabwcIXsP7
"""

# arquivo: app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# ===========================
# 1Ô∏è‚É£ Base de dados ampliada (70 produtos)
# ===========================
np.random.seed(42)

tipos = ['camiseta', 'jaqueta', 't√™nis', 'bermuda', 'chinelo', 'cachecol',
         'moletom', 'bon√©', 'saia', 'blusa', 'cal√ßa', 'sand√°lia', 'meia', 'luva', 'gorra']
climas = ['quente', 'frio']
tamanhos = ['P', 'M', 'G']

num_produtos = 70
dados = pd.DataFrame({
    'tipo': np.random.choice(tipos, num_produtos),
    'preco': np.random.randint(10, 301, num_produtos),  # pre√ßos entre 10 e 300
    'clima': np.random.choice(climas, num_produtos),
    'quantidade': np.random.randint(5, 26, num_produtos),  # quantidade entre 5 e 25
    'tamanho': np.random.choice(tamanhos, num_produtos)
})

dias = 30
estoque_critico = 5

# ===========================
# 2Ô∏è‚É£ Interface Streamlit
# ===========================
st.title("üõí Painel Interativo de Vendas Avan√ßado")

tipo = st.selectbox("Tipo de produto", dados['tipo'].unique())
preco = st.slider("Pre√ßo", 10, 300, 50, step=5)
clima = st.radio("Clima", ['quente', 'frio'])
tamanho = st.selectbox("Tamanho", dados['tamanho'].unique())
modelo_selecionado = st.selectbox("Modelo", ['Linear Regression', 'Decision Tree'])

if st.button("Prever"):
    # ===========================
    # 3Ô∏è‚É£ Previs√£o
    # ===========================
    entrada = pd.DataFrame({'tipo':[tipo],'preco':[preco],'clima':[clima],'tamanho':[tamanho]})
    colunas_categoricas = ['tipo', 'clima', 'tamanho']
    colunas_numericas = ['preco']
    transformador = ColumnTransformer([
        ('cat', OneHotEncoder(), colunas_categoricas),
        ('num', 'passthrough', colunas_numericas)
    ])
    regressor = LinearRegression() if modelo_selecionado == 'Linear Regression' else DecisionTreeRegressor(random_state=42)
    modelo = Pipeline([('transformacao', transformador), ('regressor', regressor)])

    X = dados[['tipo', 'preco', 'clima', 'tamanho']]
    y = dados['quantidade']
    modelo.fit(X, y)

    previsao = modelo.predict(entrada)[0]
    media_hist = dados[dados['tipo'] == tipo]['quantidade'].mean()
    percentual = (previsao - media_hist) / media_hist * 100

    # Resultado
    st.subheader("üìä Relat√≥rio de Previs√£o")
    st.write(f"Produto: {tipo}")
    st.write(f"Pre√ßo atual: R$ {preco}")
    st.write(f"Clima: {clima}")
    st.write(f"Tamanho: {tamanho}")
    st.write(f"Quantidade Prevista: {previsao:.1f}")
    st.write(f"M√©dia hist√≥rica: {media_hist:.1f}")
    st.write(f"Varia√ß√£o esperada: {percentual:.1f}%")

    if previsao < estoque_critico:
        st.warning(f"‚ö†Ô∏è Estoque cr√≠tico! Apenas {previsao:.1f} unidades previstas.")

    # Gr√°fico pre√ßo vs previs√£o
    precos = np.linspace(10, 300, 50)
    previsoes_precos = [modelo.predict(pd.DataFrame({'tipo':[tipo],'preco':[p],
                                                    'clima':[clima],'tamanho':[tamanho]}))[0]
                        for p in precos]
    fig, ax = plt.subplots(figsize=(7,4))
    ax.plot(precos, previsoes_precos, color='blue', linewidth=2)
    ax.scatter(preco, previsao, color='red', s=100, label='Sua escolha')
    ax.set_xlabel("Pre√ßo (R$)")
    ax.set_ylabel("Quantidade Prevista")
    ax.set_title(f"Impacto do Pre√ßo nas Vendas - {tipo.capitalize()}")
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)

    preco_ideal = precos[np.argmax(previsoes_precos)]
    st.success(f"üí∞ Pre√ßo sugerido para maximizar vendas: R$ {preco_ideal:.1f}")

    # Ranking produtos
    ranking = []
    for t in dados['tipo'].unique():
        df_tmp = pd.DataFrame({'tipo':[t],'preco':[50],'clima':[clima],'tamanho':['M']})
        qtd = modelo.predict(df_tmp)[0]
        ranking.append((t, qtd))
    ranking.sort(key=lambda x: x[1], reverse=True)
    st.subheader("üèÜ Ranking de produtos para o clima escolhido")
    for idx, (prod, qtd) in enumerate(ranking,1):
        st.write(f"{idx}. {prod}: {qtd:.1f} unidades previstas")

    # Previs√£o futura 30 dias
    previsao_futura = pd.DataFrame()
    for t in dados['tipo'].unique():
        df_tmp = pd.DataFrame({'tipo':[t]*dias,
                               'preco':[50]*dias,
                               'clima':[clima]*dias,
                               'tamanho':['M']*dias})
        df_tmp['dia'] = range(1,dias+1)
        df_tmp['previsao'] = modelo.predict(df_tmp[['tipo','preco','clima','tamanho']])
        previsao_futura = pd.concat([previsao_futura, df_tmp])

    fig2, ax2 = plt.subplots(figsize=(8,5))
    for t in dados['tipo'].unique():
        df_plot = previsao_futura[previsao_futura['tipo']==t]
        ax2.plot(df_plot['dia'], df_plot['previsao'], label=t, linewidth=2)
    ax2.set_xlabel("Dia")
    ax2.set_ylabel("Quantidade Prevista")
    ax2.set_title(f"Previs√£o futura de vendas para os pr√≥ximos {dias} dias")
    ax2.legend()
    ax2.grid(True)
    st.pyplot(fig2)

# ===========================
# 4Ô∏è‚É£ Perguntas inteligentes
# ===========================
st.subheader("üí¨ Perguntas Inteligentes sobre Vendas")
pergunta = st.text_input("Digite sua pergunta sobre vendas")
if st.button("Responder"):
    df = dados.copy()
    tipos = df['tipo'].unique()
    climas = df['clima'].unique()
    tamanhos = df['tamanho'].unique()

    tipo_pergunta = [t for t in tipos if t in pergunta.lower()]
    clima_pergunta = [c for c in climas if c in pergunta.lower()]
    tamanho_pergunta = [t for t in tamanhos if t in pergunta.lower()]

    df_filtro = df.copy()
    if tipo_pergunta:
        df_filtro = df_filtro[df_filtro['tipo'].isin(tipo_pergunta)]
    if clima_pergunta:
        df_filtro = df_filtro[df_filtro['clima'].isin(clima_pergunta)]
    if tamanho_pergunta:
        df_filtro = df_filtro[df_filtro['tamanho'].isin(tamanho_pergunta)]

    if df_filtro.empty:
        st.write("üß† IA: N√£o encontrei dados para essa combina√ß√£o.")
    else:
        resposta = "üß† IA: "
        if "tamanho mais vendido" in pergunta.lower():
            tamanho_max = df_filtro.groupby('tamanho')['quantidade'].sum().idxmax()
            qtd_max = df_filtro.groupby('tamanho')['quantidade'].sum().max()
            resposta += f"O tamanho mais vendido √© '{tamanho_max}' com {qtd_max} unidades."
        elif "produto mais vendido" in pergunta.lower():
            tipo_max = df_filtro.groupby('tipo')['quantidade'].sum().idxmax()
            qtd_max = df_filtro.groupby('tipo')['quantidade'].sum().max()
            resposta += f"O produto mais vendido √© '{tipo_max}' com {qtd_max} unidades."
        elif "quantidade m√©dia" in pergunta.lower():
            media = df_filtro['quantidade'].mean()
            resposta += f"A quantidade m√©dia vendida √© {media:.1f} unidades."
        else:
            media = df_filtro['quantidade'].mean()
            minimo = df_filtro['quantidade'].min()
            maximo = df_filtro['quantidade'].max()
            resposta += f"A quantidade m√©dia vendida √© {media:.1f} (m√≠n: {minimo}, m√°x: {maximo})."
        st.write(resposta)